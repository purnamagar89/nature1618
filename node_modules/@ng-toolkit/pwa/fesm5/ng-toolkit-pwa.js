import { NgModule } from '@angular/core';
import { SwUpdate, SwPush } from '@angular/service-worker';
import { Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * Generated from: ngt-pwa/sw-update-server.mock.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SwUpdateServerMock = /** @class */ (function () {
    function SwUpdateServerMock() {
        this.available = new Subject();
        this.activated = new Subject();
        this.isEnabled = false;
    }
    /**
     * @return {?}
     */
    SwUpdateServerMock.prototype.checkForUpdate = /**
     * @return {?}
     */
    function () {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) { return resolve(); }));
    };
    /**
     * @return {?}
     */
    SwUpdateServerMock.prototype.activateUpdate = /**
     * @return {?}
     */
    function () {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) { return resolve(); }));
    };
    return SwUpdateServerMock;
}());
if (false) {
    /** @type {?} */
    SwUpdateServerMock.prototype.available;
    /** @type {?} */
    SwUpdateServerMock.prototype.activated;
    /** @type {?} */
    SwUpdateServerMock.prototype.isEnabled;
}

/**
 * @fileoverview added by tsickle
 * Generated from: ngt-pwa/sw-push-server.mock.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var SwPushServerMock = /** @class */ (function () {
    function SwPushServerMock() {
    }
    /**
     * @param {?} options
     * @return {?}
     */
    SwPushServerMock.prototype.requestSubscription = /**
     * @param {?} options
     * @return {?}
     */
    function (options) {
        console.log("requested subscription with options: " + options);
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) { return resolve(); }));
    };
    /**
     * @return {?}
     */
    SwPushServerMock.prototype.unsubscribe = /**
     * @return {?}
     */
    function () {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        function (resolve) { return resolve(); }));
    };
    return SwPushServerMock;
}());
if (false) {
    /** @type {?} */
    SwPushServerMock.prototype.messages;
    /** @type {?} */
    SwPushServerMock.prototype.subscription;
}

/**
 * @fileoverview added by tsickle
 * Generated from: ngt-pwa/ngt-pwa-mock.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
var NgtPwaMockModule = /** @class */ (function () {
    function NgtPwaMockModule() {
    }
    NgtPwaMockModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        { provide: SwUpdate, useClass: SwUpdateServerMock },
                        { provide: SwPush, useClass: SwPushServerMock }
                    ]
                },] }
    ];
    return NgtPwaMockModule;
}());

/**
 * @fileoverview added by tsickle
 * Generated from: public_api.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * Generated from: ng-toolkit-pwa.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgtPwaMockModule, SwPushServerMock, SwUpdateServerMock };
//# sourceMappingURL=ng-toolkit-pwa.js.map
