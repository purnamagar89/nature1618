import { NgModule } from '@angular/core';
import { SwUpdate, SwPush } from '@angular/service-worker';
import { Subject } from 'rxjs';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SwUpdateServerMock {
    constructor() {
        this.available = new Subject();
        this.activated = new Subject();
        this.isEnabled = false;
    }
    /**
     * @return {?}
     */
    checkForUpdate() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => resolve()));
    }
    /**
     * @return {?}
     */
    activateUpdate() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => resolve()));
    }
}
if (false) {
    /** @type {?} */
    SwUpdateServerMock.prototype.available;
    /** @type {?} */
    SwUpdateServerMock.prototype.activated;
    /** @type {?} */
    SwUpdateServerMock.prototype.isEnabled;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class SwPushServerMock {
    /**
     * @param {?} options
     * @return {?}
     */
    requestSubscription(options) {
        console.log(`requested subscription with options: ${options}`);
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => resolve()));
    }
    /**
     * @return {?}
     */
    unsubscribe() {
        return new Promise((/**
         * @param {?} resolve
         * @return {?}
         */
        (resolve) => resolve()));
    }
}
if (false) {
    /** @type {?} */
    SwPushServerMock.prototype.messages;
    /** @type {?} */
    SwPushServerMock.prototype.subscription;
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
class NgtPwaMockModule {
}
NgtPwaMockModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    { provide: SwUpdate, useClass: SwUpdateServerMock },
                    { provide: SwPush, useClass: SwPushServerMock }
                ]
            },] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */

export { NgtPwaMockModule, SwPushServerMock, SwUpdateServerMock };
//# sourceMappingURL=ng-toolkit-pwa.js.map
