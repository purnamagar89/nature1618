(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/service-worker'), require('rxjs')) :
    typeof define === 'function' && define.amd ? define('@ng-toolkit/pwa', ['exports', '@angular/core', '@angular/service-worker', 'rxjs'], factory) :
    (global = global || self, factory((global['ng-toolkit'] = global['ng-toolkit'] || {}, global['ng-toolkit'].pwa = {}), global.ng.core, global.ng['service-worker'], global.rxjs));
}(this, (function (exports, core, serviceWorker, rxjs) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * Generated from: ngt-pwa/sw-update-server.mock.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SwUpdateServerMock = /** @class */ (function () {
        function SwUpdateServerMock() {
            this.available = new rxjs.Subject();
            this.activated = new rxjs.Subject();
            this.isEnabled = false;
        }
        /**
         * @return {?}
         */
        SwUpdateServerMock.prototype.checkForUpdate = /**
         * @return {?}
         */
        function () {
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) { return resolve(); }));
        };
        /**
         * @return {?}
         */
        SwUpdateServerMock.prototype.activateUpdate = /**
         * @return {?}
         */
        function () {
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) { return resolve(); }));
        };
        return SwUpdateServerMock;
    }());
    if (false) {
        /** @type {?} */
        SwUpdateServerMock.prototype.available;
        /** @type {?} */
        SwUpdateServerMock.prototype.activated;
        /** @type {?} */
        SwUpdateServerMock.prototype.isEnabled;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: ngt-pwa/sw-push-server.mock.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SwPushServerMock = /** @class */ (function () {
        function SwPushServerMock() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        SwPushServerMock.prototype.requestSubscription = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            console.log("requested subscription with options: " + options);
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) { return resolve(); }));
        };
        /**
         * @return {?}
         */
        SwPushServerMock.prototype.unsubscribe = /**
         * @return {?}
         */
        function () {
            return new Promise((/**
             * @param {?} resolve
             * @return {?}
             */
            function (resolve) { return resolve(); }));
        };
        return SwPushServerMock;
    }());
    if (false) {
        /** @type {?} */
        SwPushServerMock.prototype.messages;
        /** @type {?} */
        SwPushServerMock.prototype.subscription;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: ngt-pwa/ngt-pwa-mock.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgtPwaMockModule = /** @class */ (function () {
        function NgtPwaMockModule() {
        }
        NgtPwaMockModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            { provide: serviceWorker.SwUpdate, useClass: SwUpdateServerMock },
                            { provide: serviceWorker.SwPush, useClass: SwPushServerMock }
                        ]
                    },] }
        ];
        return NgtPwaMockModule;
    }());

    exports.NgtPwaMockModule = NgtPwaMockModule;
    exports.SwPushServerMock = SwPushServerMock;
    exports.SwUpdateServerMock = SwUpdateServerMock;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ng-toolkit-pwa.umd.js.map
