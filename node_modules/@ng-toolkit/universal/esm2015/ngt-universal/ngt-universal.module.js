/**
 * @fileoverview added by tsickle
 * Generated from: ngt-universal/ngt-universal.module.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { NgModule, InjectionToken } from '@angular/core';
import { WindowService } from './window.service';
import { LocalStorageWrapper } from './local-storage-wrapper.service';
import { DocumentService } from './document.service';
export { DocumentService } from './document.service';
/** @type {?} */
export const WINDOW = new InjectionToken('ng-toolkit-window');
/**
 * @param {?} windowService
 * @return {?}
 */
export function windowFactory(windowService) {
    return windowService.nativeWindow;
}
/** @type {?} */
export const LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');
/**
 * @param {?} localStorageWrapper
 * @return {?}
 */
export function localStorageFactory(localStorageWrapper) {
    return localStorageWrapper.localStorage;
}
/** @type {?} */
export const NGT_DOCUMENT = new InjectionToken('ng-toolkit-document');
/**
 * @param {?} documentService
 * @return {?}
 */
export function documentFactory(documentService) {
    console.log('document factory');
    return documentService.nativeDocument;
}
export class NgtUniversalModule {
}
NgtUniversalModule.decorators = [
    { type: NgModule, args: [{
                providers: [
                    WindowService,
                    { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                    DocumentService,
                    { provide: NGT_DOCUMENT, useFactory: documentFactory, deps: [DocumentService] },
                    LocalStorageWrapper,
                    { provide: LOCAL_STORAGE, useFactory: localStorageFactory, deps: [LocalStorageWrapper] }
                ]
            },] }
];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd0LXVuaXZlcnNhbC5tb2R1bGUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctdG9vbGtpdC91bml2ZXJzYWwvIiwic291cmNlcyI6WyJuZ3QtdW5pdmVyc2FsL25ndC11bml2ZXJzYWwubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFFBQVEsRUFBRSxjQUFjLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDekQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLGtCQUFrQixDQUFDO0FBQ2pELE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLGlDQUFpQyxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVyRCxnQ0FBYyxvQkFBb0IsQ0FBQzs7QUFFbkMsTUFBTSxPQUFPLE1BQU0sR0FBRyxJQUFJLGNBQWMsQ0FBQyxtQkFBbUIsQ0FBQzs7Ozs7QUFFN0QsTUFBTSxVQUFVLGFBQWEsQ0FBQyxhQUE0QjtJQUN0RCxPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUM7QUFDdEMsQ0FBQzs7QUFFRCxNQUFNLE9BQU8sYUFBYSxHQUFHLElBQUksY0FBYyxDQUFDLDBCQUEwQixDQUFDOzs7OztBQUUzRSxNQUFNLFVBQVUsbUJBQW1CLENBQUMsbUJBQXdDO0lBQ3hFLE9BQU8sbUJBQW1CLENBQUMsWUFBWSxDQUFDO0FBQzVDLENBQUM7O0FBRUQsTUFBTSxPQUFPLFlBQVksR0FBRyxJQUFJLGNBQWMsQ0FBQyxxQkFBcUIsQ0FBQzs7Ozs7QUFFckUsTUFBTSxVQUFVLGVBQWUsQ0FBQyxlQUFnQztJQUM1RCxPQUFPLENBQUMsR0FBRyxDQUFDLGtCQUFrQixDQUFDLENBQUM7SUFDaEMsT0FBTyxlQUFlLENBQUMsY0FBYyxDQUFDO0FBQzFDLENBQUM7QUFZRCxNQUFNLE9BQU8sa0JBQWtCOzs7WUFWOUIsUUFBUSxTQUFDO2dCQUNOLFNBQVMsRUFBRTtvQkFDUCxhQUFhO29CQUNiLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFO29CQUNyRSxlQUFlO29CQUNmLEVBQUUsT0FBTyxFQUFFLFlBQVksRUFBRSxVQUFVLEVBQUUsZUFBZSxFQUFFLElBQUksRUFBRSxDQUFDLGVBQWUsQ0FBQyxFQUFFO29CQUMvRSxtQkFBbUI7b0JBQ25CLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsbUJBQW1CLENBQUMsRUFBRTtpQkFDM0Y7YUFDSiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV2luZG93U2VydmljZSB9IGZyb20gJy4vd2luZG93LnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlV3JhcHBlciB9IGZyb20gJy4vbG9jYWwtc3RvcmFnZS13cmFwcGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRG9jdW1lbnRTZXJ2aWNlIH0gZnJvbSAnLi9kb2N1bWVudC5zZXJ2aWNlJztcblxuZXhwb3J0ICogZnJvbSAnLi9kb2N1bWVudC5zZXJ2aWNlJztcblxuZXhwb3J0IGNvbnN0IFdJTkRPVyA9IG5ldyBJbmplY3Rpb25Ub2tlbignbmctdG9vbGtpdC13aW5kb3cnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIHdpbmRvd0ZhY3Rvcnkod2luZG93U2VydmljZTogV2luZG93U2VydmljZSkge1xuICAgIHJldHVybiB3aW5kb3dTZXJ2aWNlLm5hdGl2ZVdpbmRvdztcbn1cblxuZXhwb3J0IGNvbnN0IExPQ0FMX1NUT1JBR0UgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ25nLXRvb2xraXQtbG9jYWwtc3RvcmFnZScpO1xuXG5leHBvcnQgZnVuY3Rpb24gbG9jYWxTdG9yYWdlRmFjdG9yeShsb2NhbFN0b3JhZ2VXcmFwcGVyOiBMb2NhbFN0b3JhZ2VXcmFwcGVyKSB7XG4gICAgcmV0dXJuIGxvY2FsU3RvcmFnZVdyYXBwZXIubG9jYWxTdG9yYWdlO1xufVxuXG5leHBvcnQgY29uc3QgTkdUX0RPQ1VNRU5UID0gbmV3IEluamVjdGlvblRva2VuKCduZy10b29sa2l0LWRvY3VtZW50Jyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBkb2N1bWVudEZhY3RvcnkoZG9jdW1lbnRTZXJ2aWNlOiBEb2N1bWVudFNlcnZpY2UpIHtcbiAgICBjb25zb2xlLmxvZygnZG9jdW1lbnQgZmFjdG9yeScpO1xuICAgIHJldHVybiBkb2N1bWVudFNlcnZpY2UubmF0aXZlRG9jdW1lbnQ7XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFdpbmRvd1NlcnZpY2UsXG4gICAgICAgIHsgcHJvdmlkZTogV0lORE9XLCB1c2VGYWN0b3J5OiB3aW5kb3dGYWN0b3J5LCBkZXBzOiBbV2luZG93U2VydmljZV0gfSxcbiAgICAgICAgRG9jdW1lbnRTZXJ2aWNlLFxuICAgICAgICB7IHByb3ZpZGU6IE5HVF9ET0NVTUVOVCwgdXNlRmFjdG9yeTogZG9jdW1lbnRGYWN0b3J5LCBkZXBzOiBbRG9jdW1lbnRTZXJ2aWNlXSB9LFxuICAgICAgICBMb2NhbFN0b3JhZ2VXcmFwcGVyLFxuICAgICAgICB7IHByb3ZpZGU6IExPQ0FMX1NUT1JBR0UsIHVzZUZhY3Rvcnk6IGxvY2FsU3RvcmFnZUZhY3RvcnksIGRlcHM6IFtMb2NhbFN0b3JhZ2VXcmFwcGVyXSB9XG4gICAgXVxufSlcbmV4cG9ydCBjbGFzcyBOZ3RVbml2ZXJzYWxNb2R1bGUge31cbiJdfQ==