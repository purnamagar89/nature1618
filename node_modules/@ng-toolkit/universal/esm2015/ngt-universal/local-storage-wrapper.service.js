/**
 * @fileoverview added by tsickle
 * Generated from: ngt-universal/local-storage-wrapper.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
export class LocalStorageWrapper {
    /**
     * @param {?} platformId
     */
    constructor(platformId) {
        if (isPlatformBrowser(platformId)) {
            this.localStorageRef = localStorage;
        }
        else {
            this.localStorageRef = {
                clear: (/**
                 * @return {?}
                 */
                () => { }),
                getItem: (/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => (/** @type {?} */ (undefined))),
                key: (/**
                 * @param {?} index
                 * @return {?}
                 */
                (index) => (/** @type {?} */ (undefined))),
                removeItem: (/**
                 * @param {?} key
                 * @return {?}
                 */
                (key) => { }),
                setItem: (/**
                 * @param {?} key
                 * @param {?} value
                 * @return {?}
                 */
                (key, value) => { }),
                length: 0
            };
        }
    }
    /**
     * @return {?}
     */
    get localStorage() {
        return this.localStorageRef;
    }
}
LocalStorageWrapper.decorators = [
    { type: Injectable }
];
/** @nocollapse */
LocalStorageWrapper.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    LocalStorageWrapper.prototype.localStorageRef;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWwtc3RvcmFnZS13cmFwcGVyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9AbmctdG9vbGtpdC91bml2ZXJzYWwvIiwic291cmNlcyI6WyJuZ3QtdW5pdmVyc2FsL2xvY2FsLXN0b3JhZ2Utd3JhcHBlci5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxpQkFBaUIsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBR3BELE1BQU0sT0FBTyxtQkFBbUI7Ozs7SUFHNUIsWUFBaUMsVUFBVTtRQUN2QyxJQUFJLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFO1lBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDO1NBQ3ZDO2FBQU07WUFDSCxJQUFJLENBQUMsZUFBZSxHQUFHO2dCQUN2QixLQUFLOzs7Z0JBQUUsR0FBRyxFQUFFLEdBQVUsQ0FBQyxDQUFBO2dCQUN2QixPQUFPOzs7O2dCQUFFLENBQUMsR0FBVyxFQUFFLEVBQUUsQ0FBQyxtQkFBQSxTQUFTLEVBQVUsQ0FBQTtnQkFDN0MsR0FBRzs7OztnQkFBRSxDQUFDLEtBQWEsRUFBRSxFQUFFLENBQUMsbUJBQUEsU0FBUyxFQUFVLENBQUE7Z0JBQzNDLFVBQVU7Ozs7Z0JBQUUsQ0FBQyxHQUFXLEVBQUUsRUFBRSxHQUFVLENBQUMsQ0FBQTtnQkFDdkMsT0FBTzs7Ozs7Z0JBQUUsQ0FBQyxHQUFXLEVBQUUsS0FBYSxFQUFFLEVBQUUsR0FBVSxDQUFDLENBQUE7Z0JBQ25ELE1BQU0sRUFBRSxDQUFDO2FBQ1IsQ0FBQztTQUNMO0lBQ0wsQ0FBQzs7OztJQUVELElBQUksWUFBWTtRQUNaLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztJQUNoQyxDQUFDOzs7WUFyQkosVUFBVTs7Ozs0Q0FJTSxNQUFNLFNBQUMsV0FBVzs7Ozs7OztJQUYvQiw4Q0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VXcmFwcGVyIHtcbiAgICBwcml2YXRlIGxvY2FsU3RvcmFnZVJlZjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQpIHtcbiAgICAgICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2FsU3RvcmFnZVJlZiA9IGxvY2FsU3RvcmFnZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxTdG9yYWdlUmVmID0ge1xuICAgICAgICAgICAgY2xlYXI6ICgpID0+IHsvKm5vb3AqL30sXG4gICAgICAgICAgICBnZXRJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHVuZGVmaW5lZCBhcyBzdHJpbmcsXG4gICAgICAgICAgICBrZXk6IChpbmRleDogbnVtYmVyKSA9PiB1bmRlZmluZWQgYXMgc3RyaW5nLFxuICAgICAgICAgICAgcmVtb3ZlSXRlbTogKGtleTogc3RyaW5nKSA9PiB7Lypub29wKi99LFxuICAgICAgICAgICAgc2V0SXRlbTogKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7Lypub29wKi99LFxuICAgICAgICAgICAgbGVuZ3RoOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGxvY2FsU3RvcmFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdG9yYWdlUmVmO1xuICAgIH1cbn1cbiJdfQ==