import { Injectable, Inject, PLATFORM_ID, NgModule, InjectionToken } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var WindowService = /** @class */ (function () {
    function WindowService(platformId) {
        if (!isPlatformBrowser(platformId)) {
            // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));
            // this._window = {navigator: {userAgent: req.get('User-Agent')}};
            this._window = /** @type {?} */ ({ navigator: { userAgent: 'fakeAgent' } });
        }
        else {
            this._window = window;
        }
    }
    Object.defineProperty(WindowService.prototype, "nativeWindow", {
        get: /**
         * @return {?}
         */
        function () {
            return this._window;
        },
        enumerable: true,
        configurable: true
    });
    WindowService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    WindowService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return WindowService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var LocalStorageWrapper = /** @class */ (function () {
    function LocalStorageWrapper(platformId) {
        if (isPlatformBrowser(platformId)) {
            this.localStorageRef = localStorage;
        }
        else {
            this.localStorageRef = {
                clear: function () {
                    /*noop*/ 
                },
                getItem: function (key) { return (undefined); },
                key: function (index) { return (undefined); },
                removeItem: function (key) {
                    /*noop*/ 
                },
                setItem: function (key, value) {
                    /*noop*/ 
                },
                length: 0
            };
        }
    }
    Object.defineProperty(LocalStorageWrapper.prototype, "localStorage", {
        get: /**
         * @return {?}
         */
        function () {
            return this.localStorageRef;
        },
        enumerable: true,
        configurable: true
    });
    LocalStorageWrapper.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    LocalStorageWrapper.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return LocalStorageWrapper;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var /** @type {?} */ WINDOW = new InjectionToken('ng-toolkit-window');
/**
 * @param {?} windowService
 * @return {?}
 */
function windowFactory(windowService) {
    return windowService.nativeWindow;
}
var /** @type {?} */ LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');
/**
 * @param {?} localStorageWrapper
 * @return {?}
 */
function localStoragefactory(localStorageWrapper) {
    return localStorageWrapper.localStorage;
}
var NgtUniversalModule = /** @class */ (function () {
    function NgtUniversalModule() {
    }
    NgtUniversalModule.decorators = [
        { type: NgModule, args: [{
                    providers: [
                        WindowService,
                        { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                        LocalStorageWrapper,
                        { provide: LOCAL_STORAGE, useFactory: localStoragefactory, deps: [LocalStorageWrapper] },
                    ]
                },] },
    ];
    return NgtUniversalModule;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */

export { WINDOW, windowFactory, LOCAL_STORAGE, localStoragefactory, NgtUniversalModule, LocalStorageWrapper as ɵb, WindowService as ɵa };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9vbGtpdC11bml2ZXJzYWwuanMubWFwIiwic291cmNlcyI6WyJuZzovL0BuZy10b29sa2l0L3VuaXZlcnNhbC9uZ3QtdW5pdmVyc2FsL3dpbmRvdy5zZXJ2aWNlLnRzIiwibmc6Ly9AbmctdG9vbGtpdC91bml2ZXJzYWwvbmd0LXVuaXZlcnNhbC9sb2NhbC1zdG9yYWdlLXdyYXBwZXIuc2VydmljZS50cyIsIm5nOi8vQG5nLXRvb2xraXQvdW5pdmVyc2FsL25ndC11bml2ZXJzYWwvbmd0LXVuaXZlcnNhbC5tb2R1bGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgSW5qZWN0LCBQTEFURk9STV9JRCwgSW5qZWN0aW9uVG9rZW4gfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIFdpbmRvd1NlcnZpY2Uge1xuICAgIHByaXZhdGUgX3dpbmRvdzogV2luZG93O1xuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQ6IGFueSkge1xuICAgICAgICBpZiAoIWlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICAvLyBjb25zdCByZXE6IGFueSA9IHRoaXMuaW5qZWN0b3IuZ2V0KHRoaXMuaW5qZWN0b3IuZ2V0KFVTRVJBR0VOVFRPS0VOKSk7XG4gICAgICAgICAgICAvLyB0aGlzLl93aW5kb3cgPSB7bmF2aWdhdG9yOiB7dXNlckFnZW50OiByZXEuZ2V0KCdVc2VyLUFnZW50Jyl9fTtcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvdyA9IHtuYXZpZ2F0b3I6IHt1c2VyQWdlbnQ6ICdmYWtlQWdlbnQnfX0gYXMgV2luZG93O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fd2luZG93ID0gd2luZG93O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IG5hdGl2ZVdpbmRvdygpOiBhbnkge1xuICAgICAgICByZXR1cm4gdGhpcy5fd2luZG93O1xuICAgIH1cbn1cbiIsImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgUExBVEZPUk1fSUQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGlzUGxhdGZvcm1Ccm93c2VyIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZVdyYXBwZXIge1xuICAgIHByaXZhdGUgbG9jYWxTdG9yYWdlUmVmO1xuXG4gICAgY29uc3RydWN0b3IoQEluamVjdChQTEFURk9STV9JRCkgcGxhdGZvcm1JZCkge1xuICAgICAgICBpZiAoaXNQbGF0Zm9ybUJyb3dzZXIocGxhdGZvcm1JZCkpIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxTdG9yYWdlUmVmID0gbG9jYWxTdG9yYWdlO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5sb2NhbFN0b3JhZ2VSZWYgPSB7XG4gICAgICAgICAgICBjbGVhcjogKCkgPT4gey8qbm9vcCovfSxcbiAgICAgICAgICAgIGdldEl0ZW06IChrZXk6IHN0cmluZykgPT4gdW5kZWZpbmVkIGFzIHN0cmluZyxcbiAgICAgICAgICAgIGtleTogKGluZGV4OiBudW1iZXIpID0+IHVuZGVmaW5lZCBhcyBzdHJpbmcsXG4gICAgICAgICAgICByZW1vdmVJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHsvKm5vb3AqL30sXG4gICAgICAgICAgICBzZXRJdGVtOiAoa2V5OiBzdHJpbmcsIHZhbHVlOiBzdHJpbmcpID0+IHsvKm5vb3AqL30sXG4gICAgICAgICAgICBsZW5ndGg6IDBcbiAgICAgICAgICAgIH07XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbG9jYWxTdG9yYWdlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5sb2NhbFN0b3JhZ2VSZWY7XG4gICAgfVxufVxuIiwiaW1wb3J0IHsgTmdNb2R1bGUsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBXaW5kb3dTZXJ2aWNlIH0gZnJvbSAnLi93aW5kb3cuc2VydmljZSc7XG5pbXBvcnQgeyBMb2NhbFN0b3JhZ2VXcmFwcGVyIH0gZnJvbSAnLi9sb2NhbC1zdG9yYWdlLXdyYXBwZXIuc2VydmljZSc7XG5cbmV4cG9ydCBjb25zdCBXSU5ET1cgPSBuZXcgSW5qZWN0aW9uVG9rZW4oJ25nLXRvb2xraXQtd2luZG93Jyk7XG5cbmV4cG9ydCBmdW5jdGlvbiB3aW5kb3dGYWN0b3J5KHdpbmRvd1NlcnZpY2U6IFdpbmRvd1NlcnZpY2UpIHtcbiAgICByZXR1cm4gd2luZG93U2VydmljZS5uYXRpdmVXaW5kb3c7XG59XG5cbmV4cG9ydCBjb25zdCBMT0NBTF9TVE9SQUdFID0gbmV3IEluamVjdGlvblRva2VuKCduZy10b29sa2l0LWxvY2FsLXN0b3JhZ2UnKTtcblxuZXhwb3J0IGZ1bmN0aW9uIGxvY2FsU3RvcmFnZWZhY3RvcnkobG9jYWxTdG9yYWdlV3JhcHBlcjogTG9jYWxTdG9yYWdlV3JhcHBlcikge1xuICAgIHJldHVybiBsb2NhbFN0b3JhZ2VXcmFwcGVyLmxvY2FsU3RvcmFnZTtcbn1cblxuQE5nTW9kdWxlKHtcbiAgICBwcm92aWRlcnM6IFtcbiAgICAgICAgV2luZG93U2VydmljZSxcbiAgICAgICAgeyBwcm92aWRlOiBXSU5ET1csIHVzZUZhY3Rvcnk6IHdpbmRvd0ZhY3RvcnksIGRlcHM6IFtXaW5kb3dTZXJ2aWNlXSB9LFxuICAgICAgICBMb2NhbFN0b3JhZ2VXcmFwcGVyLFxuICAgICAgICB7IHByb3ZpZGU6IExPQ0FMX1NUT1JBR0UsIHVzZUZhY3Rvcnk6IGxvY2FsU3RvcmFnZWZhY3RvcnksIGRlcHM6IFtMb2NhbFN0b3JhZ2VXcmFwcGVyXSB9LFxuICAgIF1cbn0pXG5leHBvcnQgY2xhc3MgTmd0VW5pdmVyc2FsTW9kdWxlIHt9XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBO0lBTUksdUJBQWlDLFVBQWU7UUFDNUMsSUFBSSxDQUFDLGlCQUFpQixDQUFDLFVBQVUsQ0FBQyxFQUFFOzs7WUFHaEMsSUFBSSxDQUFDLE9BQU8scUJBQUcsRUFBQyxTQUFTLEVBQUUsRUFBQyxTQUFTLEVBQUUsV0FBVyxFQUFDLEVBQVcsQ0FBQSxDQUFDO1NBQ2xFO2FBQU07WUFDSCxJQUFJLENBQUMsT0FBTyxHQUFHLE1BQU0sQ0FBQztTQUN6QjtLQUNKO0lBRUQsc0JBQUksdUNBQVk7Ozs7UUFBaEI7WUFDSSxPQUFPLElBQUksQ0FBQyxPQUFPLENBQUM7U0FDdkI7OztPQUFBOztnQkFmSixVQUFVOzs7O2dEQUdNLE1BQU0sU0FBQyxXQUFXOzt3QkFObkM7Ozs7Ozs7QUNBQTtJQU9JLDZCQUFpQyxVQUFVO1FBQ3ZDLElBQUksaUJBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7WUFDL0IsSUFBSSxDQUFDLGVBQWUsR0FBRyxZQUFZLENBQUM7U0FDdkM7YUFBTTtZQUNILElBQUksQ0FBQyxlQUFlLEdBQUc7Z0JBQ3ZCLEtBQUssRUFBRTs7aUJBQWdCO2dCQUN2QixPQUFPLEVBQUUsVUFBQyxHQUFXLFlBQUssU0FBbUIsSUFBQTtnQkFDN0MsR0FBRyxFQUFFLFVBQUMsS0FBYSxZQUFLLFNBQW1CLElBQUE7Z0JBQzNDLFVBQVUsRUFBRSxVQUFDLEdBQVc7O2lCQUFlO2dCQUN2QyxPQUFPLEVBQUUsVUFBQyxHQUFXLEVBQUUsS0FBYTs7aUJBQWU7Z0JBQ25ELE1BQU0sRUFBRSxDQUFDO2FBQ1IsQ0FBQztTQUNMO0tBQ0o7SUFFRCxzQkFBSSw2Q0FBWTs7OztRQUFoQjtZQUNJLE9BQU8sSUFBSSxDQUFDLGVBQWUsQ0FBQztTQUMvQjs7O09BQUE7O2dCQXJCSixVQUFVOzs7O2dEQUlNLE1BQU0sU0FBQyxXQUFXOzs4QkFQbkM7Ozs7Ozs7QUNBQSxxQkFJYSxNQUFNLEdBQUcsSUFBSSxjQUFjLENBQUMsbUJBQW1CLENBQUMsQ0FBQzs7Ozs7QUFFOUQsdUJBQThCLGFBQTRCO0lBQ3RELE9BQU8sYUFBYSxDQUFDLFlBQVksQ0FBQztDQUNyQztBQUVELHFCQUFhLGFBQWEsR0FBRyxJQUFJLGNBQWMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDOzs7OztBQUU1RSw2QkFBb0MsbUJBQXdDO0lBQ3hFLE9BQU8sbUJBQW1CLENBQUMsWUFBWSxDQUFDO0NBQzNDOzs7OztnQkFFQSxRQUFRLFNBQUM7b0JBQ04sU0FBUyxFQUFFO3dCQUNQLGFBQWE7d0JBQ2IsRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUMsYUFBYSxDQUFDLEVBQUU7d0JBQ3JFLG1CQUFtQjt3QkFDbkIsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLFVBQVUsRUFBRSxtQkFBbUIsRUFBRSxJQUFJLEVBQUUsQ0FBQyxtQkFBbUIsQ0FBQyxFQUFFO3FCQUMzRjtpQkFDSjs7NkJBdkJEOzs7Ozs7Ozs7Ozs7Ozs7In0=