(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('@ng-toolkit/universal', ['exports', '@angular/core', '@angular/common'], factory) :
    (factory((global['ng-toolkit'] = global['ng-toolkit'] || {}, global['ng-toolkit'].universal = {}),global.ng.core,global.ng.common));
}(this, (function (exports,core,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var WindowService = (function () {
        function WindowService(platformId) {
            if (!common.isPlatformBrowser(platformId)) {
                // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));
                // this._window = {navigator: {userAgent: req.get('User-Agent')}};
                this._window = /** @type {?} */ ({ navigator: { userAgent: 'fakeAgent' } });
            }
            else {
                this._window = window;
            }
        }
        Object.defineProperty(WindowService.prototype, "nativeWindow", {
            get: /**
             * @return {?}
             */ function () {
                return this._window;
            },
            enumerable: true,
            configurable: true
        });
        WindowService.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        WindowService.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        return WindowService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var LocalStorageWrapper = (function () {
        function LocalStorageWrapper(platformId) {
            if (common.isPlatformBrowser(platformId)) {
                this.localStorageRef = localStorage;
            }
            else {
                this.localStorageRef = {
                    clear: function () {
                        /*noop*/
                    },
                    getItem: function (key) { return (undefined); },
                    key: function (index) { return (undefined); },
                    removeItem: function (key) {
                        /*noop*/
                    },
                    setItem: function (key, value) {
                        /*noop*/
                    },
                    length: 0
                };
            }
        }
        Object.defineProperty(LocalStorageWrapper.prototype, "localStorage", {
            get: /**
             * @return {?}
             */ function () {
                return this.localStorageRef;
            },
            enumerable: true,
            configurable: true
        });
        LocalStorageWrapper.decorators = [
            { type: core.Injectable },
        ];
        /** @nocollapse */
        LocalStorageWrapper.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: core.Inject, args: [core.PLATFORM_ID,] }] }
            ];
        };
        return LocalStorageWrapper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */
    var /** @type {?} */ WINDOW = new core.InjectionToken('ng-toolkit-window');
    /**
     * @param {?} windowService
     * @return {?}
     */
    function windowFactory(windowService) {
        return windowService.nativeWindow;
    }
    var /** @type {?} */ LOCAL_STORAGE = new core.InjectionToken('ng-toolkit-local-storage');
    /**
     * @param {?} localStorageWrapper
     * @return {?}
     */
    function localStoragefactory(localStorageWrapper) {
        return localStorageWrapper.localStorage;
    }
    var NgtUniversalModule = (function () {
        function NgtUniversalModule() {
        }
        NgtUniversalModule.decorators = [
            { type: core.NgModule, args: [{
                        providers: [
                            WindowService,
                            { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },
                            LocalStorageWrapper,
                            { provide: LOCAL_STORAGE, useFactory: localStoragefactory, deps: [LocalStorageWrapper] },
                        ]
                    },] },
        ];
        return NgtUniversalModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes} checked by tsc
     */

    exports.WINDOW = WINDOW;
    exports.windowFactory = windowFactory;
    exports.LOCAL_STORAGE = LOCAL_STORAGE;
    exports.localStoragefactory = localStoragefactory;
    exports.NgtUniversalModule = NgtUniversalModule;
    exports.ɵb = LocalStorageWrapper;
    exports.ɵa = WindowService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmctdG9vbGtpdC11bml2ZXJzYWwudW1kLmpzLm1hcCIsInNvdXJjZXMiOlsibmc6Ly9AbmctdG9vbGtpdC91bml2ZXJzYWwvbmd0LXVuaXZlcnNhbC93aW5kb3cuc2VydmljZS50cyIsIm5nOi8vQG5nLXRvb2xraXQvdW5pdmVyc2FsL25ndC11bml2ZXJzYWwvbG9jYWwtc3RvcmFnZS13cmFwcGVyLnNlcnZpY2UudHMiLCJuZzovL0BuZy10b29sa2l0L3VuaXZlcnNhbC9uZ3QtdW5pdmVyc2FsL25ndC11bml2ZXJzYWwubW9kdWxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCwgUExBVEZPUk1fSUQsIEluamVjdGlvblRva2VuIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBXaW5kb3dTZXJ2aWNlIHtcbiAgICBwcml2YXRlIF93aW5kb3c6IFdpbmRvdztcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBhbnkpIHtcbiAgICAgICAgaWYgKCFpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSkge1xuICAgICAgICAgICAgLy8gY29uc3QgcmVxOiBhbnkgPSB0aGlzLmluamVjdG9yLmdldCh0aGlzLmluamVjdG9yLmdldChVU0VSQUdFTlRUT0tFTikpO1xuICAgICAgICAgICAgLy8gdGhpcy5fd2luZG93ID0ge25hdmlnYXRvcjoge3VzZXJBZ2VudDogcmVxLmdldCgnVXNlci1BZ2VudCcpfX07XG4gICAgICAgICAgICB0aGlzLl93aW5kb3cgPSB7bmF2aWdhdG9yOiB7dXNlckFnZW50OiAnZmFrZUFnZW50J319IGFzIFdpbmRvdztcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX3dpbmRvdyA9IHdpbmRvdztcbiAgICAgICAgfVxuICAgIH1cblxuICAgIGdldCBuYXRpdmVXaW5kb3coKTogYW55IHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX3dpbmRvdztcbiAgICB9XG59XG4iLCJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBMb2NhbFN0b3JhZ2VXcmFwcGVyIHtcbiAgICBwcml2YXRlIGxvY2FsU3RvcmFnZVJlZjtcblxuICAgIGNvbnN0cnVjdG9yKEBJbmplY3QoUExBVEZPUk1fSUQpIHBsYXRmb3JtSWQpIHtcbiAgICAgICAgaWYgKGlzUGxhdGZvcm1Ccm93c2VyKHBsYXRmb3JtSWQpKSB7XG4gICAgICAgICAgICB0aGlzLmxvY2FsU3RvcmFnZVJlZiA9IGxvY2FsU3RvcmFnZTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubG9jYWxTdG9yYWdlUmVmID0ge1xuICAgICAgICAgICAgY2xlYXI6ICgpID0+IHsvKm5vb3AqL30sXG4gICAgICAgICAgICBnZXRJdGVtOiAoa2V5OiBzdHJpbmcpID0+IHVuZGVmaW5lZCBhcyBzdHJpbmcsXG4gICAgICAgICAgICBrZXk6IChpbmRleDogbnVtYmVyKSA9PiB1bmRlZmluZWQgYXMgc3RyaW5nLFxuICAgICAgICAgICAgcmVtb3ZlSXRlbTogKGtleTogc3RyaW5nKSA9PiB7Lypub29wKi99LFxuICAgICAgICAgICAgc2V0SXRlbTogKGtleTogc3RyaW5nLCB2YWx1ZTogc3RyaW5nKSA9PiB7Lypub29wKi99LFxuICAgICAgICAgICAgbGVuZ3RoOiAwXG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuXG4gICAgZ2V0IGxvY2FsU3RvcmFnZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMubG9jYWxTdG9yYWdlUmVmO1xuICAgIH1cbn1cbiIsImltcG9ydCB7IE5nTW9kdWxlLCBJbmplY3Rpb25Ub2tlbiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgV2luZG93U2VydmljZSB9IGZyb20gJy4vd2luZG93LnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9jYWxTdG9yYWdlV3JhcHBlciB9IGZyb20gJy4vbG9jYWwtc3RvcmFnZS13cmFwcGVyLnNlcnZpY2UnO1xuXG5leHBvcnQgY29uc3QgV0lORE9XID0gbmV3IEluamVjdGlvblRva2VuKCduZy10b29sa2l0LXdpbmRvdycpO1xuXG5leHBvcnQgZnVuY3Rpb24gd2luZG93RmFjdG9yeSh3aW5kb3dTZXJ2aWNlOiBXaW5kb3dTZXJ2aWNlKSB7XG4gICAgcmV0dXJuIHdpbmRvd1NlcnZpY2UubmF0aXZlV2luZG93O1xufVxuXG5leHBvcnQgY29uc3QgTE9DQUxfU1RPUkFHRSA9IG5ldyBJbmplY3Rpb25Ub2tlbignbmctdG9vbGtpdC1sb2NhbC1zdG9yYWdlJyk7XG5cbmV4cG9ydCBmdW5jdGlvbiBsb2NhbFN0b3JhZ2VmYWN0b3J5KGxvY2FsU3RvcmFnZVdyYXBwZXI6IExvY2FsU3RvcmFnZVdyYXBwZXIpIHtcbiAgICByZXR1cm4gbG9jYWxTdG9yYWdlV3JhcHBlci5sb2NhbFN0b3JhZ2U7XG59XG5cbkBOZ01vZHVsZSh7XG4gICAgcHJvdmlkZXJzOiBbXG4gICAgICAgIFdpbmRvd1NlcnZpY2UsXG4gICAgICAgIHsgcHJvdmlkZTogV0lORE9XLCB1c2VGYWN0b3J5OiB3aW5kb3dGYWN0b3J5LCBkZXBzOiBbV2luZG93U2VydmljZV0gfSxcbiAgICAgICAgTG9jYWxTdG9yYWdlV3JhcHBlcixcbiAgICAgICAgeyBwcm92aWRlOiBMT0NBTF9TVE9SQUdFLCB1c2VGYWN0b3J5OiBsb2NhbFN0b3JhZ2VmYWN0b3J5LCBkZXBzOiBbTG9jYWxTdG9yYWdlV3JhcHBlcl0gfSxcbiAgICBdXG59KVxuZXhwb3J0IGNsYXNzIE5ndFVuaXZlcnNhbE1vZHVsZSB7fVxuIl0sIm5hbWVzIjpbImlzUGxhdGZvcm1Ccm93c2VyIiwiSW5qZWN0YWJsZSIsIkluamVjdCIsIlBMQVRGT1JNX0lEIiwiSW5qZWN0aW9uVG9rZW4iLCJOZ01vZHVsZSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7OztBQUFBO1FBTUksdUJBQWlDLFVBQWU7WUFDNUMsSUFBSSxDQUFDQSx3QkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRTs7O2dCQUdoQyxJQUFJLENBQUMsT0FBTyxxQkFBRyxFQUFDLFNBQVMsRUFBRSxFQUFDLFNBQVMsRUFBRSxXQUFXLEVBQUMsRUFBVyxDQUFBLENBQUM7YUFDbEU7aUJBQU07Z0JBQ0gsSUFBSSxDQUFDLE9BQU8sR0FBRyxNQUFNLENBQUM7YUFDekI7U0FDSjtRQUVELHNCQUFJLHVDQUFZOzs7Z0JBQWhCO2dCQUNJLE9BQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQzthQUN2Qjs7O1dBQUE7O29CQWZKQyxlQUFVOzs7Ozt3REFHTUMsV0FBTSxTQUFDQyxnQkFBVzs7OzRCQU5uQzs7Ozs7OztBQ0FBO1FBT0ksNkJBQWlDLFVBQVU7WUFDdkMsSUFBSUgsd0JBQWlCLENBQUMsVUFBVSxDQUFDLEVBQUU7Z0JBQy9CLElBQUksQ0FBQyxlQUFlLEdBQUcsWUFBWSxDQUFDO2FBQ3ZDO2lCQUFNO2dCQUNILElBQUksQ0FBQyxlQUFlLEdBQUc7b0JBQ3ZCLEtBQUssRUFBRTs7cUJBQWdCO29CQUN2QixPQUFPLEVBQUUsVUFBQyxHQUFXLFlBQUssU0FBbUIsSUFBQTtvQkFDN0MsR0FBRyxFQUFFLFVBQUMsS0FBYSxZQUFLLFNBQW1CLElBQUE7b0JBQzNDLFVBQVUsRUFBRSxVQUFDLEdBQVc7O3FCQUFlO29CQUN2QyxPQUFPLEVBQUUsVUFBQyxHQUFXLEVBQUUsS0FBYTs7cUJBQWU7b0JBQ25ELE1BQU0sRUFBRSxDQUFDO2lCQUNSLENBQUM7YUFDTDtTQUNKO1FBRUQsc0JBQUksNkNBQVk7OztnQkFBaEI7Z0JBQ0ksT0FBTyxJQUFJLENBQUMsZUFBZSxDQUFDO2FBQy9COzs7V0FBQTs7b0JBckJKQyxlQUFVOzs7Ozt3REFJTUMsV0FBTSxTQUFDQyxnQkFBVzs7O2tDQVBuQzs7Ozs7OztBQ0FBLHlCQUlhLE1BQU0sR0FBRyxJQUFJQyxtQkFBYyxDQUFDLG1CQUFtQixDQUFDLENBQUM7Ozs7O0FBRTlELDJCQUE4QixhQUE0QjtRQUN0RCxPQUFPLGFBQWEsQ0FBQyxZQUFZLENBQUM7S0FDckM7QUFFRCx5QkFBYSxhQUFhLEdBQUcsSUFBSUEsbUJBQWMsQ0FBQywwQkFBMEIsQ0FBQyxDQUFDOzs7OztBQUU1RSxpQ0FBb0MsbUJBQXdDO1FBQ3hFLE9BQU8sbUJBQW1CLENBQUMsWUFBWSxDQUFDO0tBQzNDOzs7OztvQkFFQUMsYUFBUSxTQUFDO3dCQUNOLFNBQVMsRUFBRTs0QkFDUCxhQUFhOzRCQUNiLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLGFBQWEsQ0FBQyxFQUFFOzRCQUNyRSxtQkFBbUI7NEJBQ25CLEVBQUUsT0FBTyxFQUFFLGFBQWEsRUFBRSxVQUFVLEVBQUUsbUJBQW1CLEVBQUUsSUFBSSxFQUFFLENBQUMsbUJBQW1CLENBQUMsRUFBRTt5QkFDM0Y7cUJBQ0o7O2lDQXZCRDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7In0=