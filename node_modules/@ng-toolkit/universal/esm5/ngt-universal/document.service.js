/**
 * @fileoverview added by tsickle
 * Generated from: ngt-universal/document.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
var DocumentService = /** @class */ (function () {
    function DocumentService(platformId) {
        if (!isPlatformBrowser(platformId)) {
            this._document = (/** @type {?} */ ((/** @type {?} */ ({
                getElementById: (/**
                 * @param {?} id
                 * @return {?}
                 */
                function (id) { return new HTMLElement(); }),
                getElementsByClassName: (/**
                 * @param {?} className
                 * @return {?}
                 */
                function (className) { return new HTMLCollection(); }),
                getElementsByName: (/**
                 * @param {?} name
                 * @return {?}
                 */
                function (name) { return new NodeList(); }),
                getElementsByTagName: (/**
                 * @param {?} name
                 * @return {?}
                 */
                function (name) { return new NodeList(); })
            }))));
        }
        else {
            console.log('in browser, assigning document');
            // this._document = document;
            this._document = (/** @type {?} */ ({}));
        }
    }
    Object.defineProperty(DocumentService.prototype, "nativeDocument", {
        get: /**
         * @return {?}
         */
        function () {
            console.log('get native document');
            console.log(this._document);
            return this._document;
        },
        enumerable: true,
        configurable: true
    });
    DocumentService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DocumentService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
    ]; };
    return DocumentService;
}());
export { DocumentService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    DocumentService.prototype._document;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZG9jdW1lbnQuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL0BuZy10b29sa2l0L3VuaXZlcnNhbC8iLCJzb3VyY2VzIjpbIm5ndC11bml2ZXJzYWwvZG9jdW1lbnQuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNoRSxPQUFPLEVBQUUsaUJBQWlCLEVBQUUsTUFBTSxpQkFBaUIsQ0FBQztBQUVwRDtJQUdJLHlCQUFpQyxVQUFlO1FBQzVDLElBQUksQ0FBQyxpQkFBaUIsQ0FBQyxVQUFVLENBQUMsRUFBRTtZQUNoQyxJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFBLG1CQUFVO2dCQUN2QixjQUFjOzs7O2dCQUFFLFVBQUMsRUFBVSxJQUFLLE9BQUEsSUFBSSxXQUFXLEVBQUUsRUFBakIsQ0FBaUIsQ0FBQTtnQkFDakQsc0JBQXNCOzs7O2dCQUFFLFVBQUMsU0FBaUIsSUFBSyxPQUFBLElBQUksY0FBYyxFQUFFLEVBQXBCLENBQW9CLENBQUE7Z0JBQ25FLGlCQUFpQjs7OztnQkFBRSxVQUFDLElBQVksSUFBSyxPQUFBLElBQUksUUFBUSxFQUFFLEVBQWQsQ0FBYyxDQUFBO2dCQUNuRCxvQkFBb0I7Ozs7Z0JBQUUsVUFBQyxJQUFZLElBQUssT0FBQSxJQUFJLFFBQVEsRUFBRSxFQUFkLENBQWMsQ0FBQTthQUN6RCxFQUFBLEVBQVksQ0FBQztTQUNqQjthQUFNO1lBQ0gsT0FBTyxDQUFDLEdBQUcsQ0FBQyxnQ0FBZ0MsQ0FBQyxDQUFDO1lBQzlDLDZCQUE2QjtZQUM3QixJQUFJLENBQUMsU0FBUyxHQUFHLG1CQUFBLEVBQUUsRUFBWSxDQUFDO1NBQ25DO0lBQ0wsQ0FBQztJQUVELHNCQUFJLDJDQUFjOzs7O1FBQWxCO1lBQ0ksT0FBTyxDQUFDLEdBQUcsQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO1lBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQzVCLE9BQU8sSUFBSSxDQUFDLFNBQVMsQ0FBQztRQUMxQixDQUFDOzs7T0FBQTs7Z0JBdEJKLFVBQVU7Ozs7Z0RBR00sTUFBTSxTQUFDLFdBQVc7O0lBb0JuQyxzQkFBQztDQUFBLEFBdkJELElBdUJDO1NBdEJZLGVBQWU7Ozs7OztJQUN4QixvQ0FBNEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QsIFBMQVRGT1JNX0lEIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBpc1BsYXRmb3JtQnJvd3NlciB9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEb2N1bWVudFNlcnZpY2Uge1xuICAgIHByaXZhdGUgX2RvY3VtZW50OiBEb2N1bWVudDtcbiAgICBjb25zdHJ1Y3RvcihASW5qZWN0KFBMQVRGT1JNX0lEKSBwbGF0Zm9ybUlkOiBhbnkpIHtcbiAgICAgICAgaWYgKCFpc1BsYXRmb3JtQnJvd3NlcihwbGF0Zm9ybUlkKSkge1xuICAgICAgICAgICAgdGhpcy5fZG9jdW1lbnQgPSA8dW5rbm93bj4ge1xuICAgICAgICAgICAgICAgIGdldEVsZW1lbnRCeUlkOiAoaWQ6IHN0cmluZykgPT4gbmV3IEhUTUxFbGVtZW50KCksXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNCeUNsYXNzTmFtZTogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBuZXcgSFRNTENvbGxlY3Rpb24oKSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50c0J5TmFtZTogKG5hbWU6IHN0cmluZykgPT4gbmV3IE5vZGVMaXN0KCksXG4gICAgICAgICAgICAgICAgZ2V0RWxlbWVudHNCeVRhZ05hbWU6IChuYW1lOiBzdHJpbmcpID0+IG5ldyBOb2RlTGlzdCgpXG4gICAgICAgICAgICB9IGFzIERvY3VtZW50O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coJ2luIGJyb3dzZXIsIGFzc2lnbmluZyBkb2N1bWVudCcpO1xuICAgICAgICAgICAgLy8gdGhpcy5fZG9jdW1lbnQgPSBkb2N1bWVudDtcbiAgICAgICAgICAgIHRoaXMuX2RvY3VtZW50ID0ge30gYXMgRG9jdW1lbnQ7XG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBnZXQgbmF0aXZlRG9jdW1lbnQoKTogRG9jdW1lbnQge1xuICAgICAgICBjb25zb2xlLmxvZygnZ2V0IG5hdGl2ZSBkb2N1bWVudCcpO1xuICAgICAgICBjb25zb2xlLmxvZyh0aGlzLl9kb2N1bWVudCk7XG4gICAgICAgIHJldHVybiB0aGlzLl9kb2N1bWVudDtcbiAgICB9XG59XG4iXX0=