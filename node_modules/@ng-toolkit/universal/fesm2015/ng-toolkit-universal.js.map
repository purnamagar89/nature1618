{"version":3,"file":"ng-toolkit-universal.js.map","sources":["ng://@ng-toolkit/universal/ngt-universal/window.service.ts","ng://@ng-toolkit/universal/ngt-universal/local-storage-wrapper.service.ts","ng://@ng-toolkit/universal/ngt-universal/ngt-universal.module.ts"],"sourcesContent":["import { Injectable, Inject, PLATFORM_ID, InjectionToken } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class WindowService {\n    private _window: Window;\n    constructor(@Inject(PLATFORM_ID) platformId: any) {\n        if (!isPlatformBrowser(platformId)) {\n            // const req: any = this.injector.get(this.injector.get(USERAGENTTOKEN));\n            // this._window = {navigator: {userAgent: req.get('User-Agent')}};\n            this._window = {navigator: {userAgent: 'fakeAgent'}} as Window;\n        } else {\n            this._window = window;\n        }\n    }\n\n    get nativeWindow(): any {\n        return this._window;\n    }\n}\n","import { Injectable, Inject, PLATFORM_ID } from '@angular/core';\nimport { isPlatformBrowser } from '@angular/common';\n\n@Injectable()\nexport class LocalStorageWrapper {\n    private localStorageRef;\n\n    constructor(@Inject(PLATFORM_ID) platformId) {\n        if (isPlatformBrowser(platformId)) {\n            this.localStorageRef = localStorage;\n        } else {\n            this.localStorageRef = {\n            clear: () => {/*noop*/},\n            getItem: (key: string) => undefined as string,\n            key: (index: number) => undefined as string,\n            removeItem: (key: string) => {/*noop*/},\n            setItem: (key: string, value: string) => {/*noop*/},\n            length: 0\n            };\n        }\n    }\n\n    get localStorage() {\n        return this.localStorageRef;\n    }\n}\n","import { NgModule, InjectionToken } from '@angular/core';\nimport { WindowService } from './window.service';\nimport { LocalStorageWrapper } from './local-storage-wrapper.service';\n\nexport const WINDOW = new InjectionToken('ng-toolkit-window');\n\nexport function windowFactory(windowService: WindowService) {\n    return windowService.nativeWindow;\n}\n\nexport const LOCAL_STORAGE = new InjectionToken('ng-toolkit-local-storage');\n\nexport function localStoragefactory(localStorageWrapper: LocalStorageWrapper) {\n    return localStorageWrapper.localStorage;\n}\n\n@NgModule({\n    providers: [\n        WindowService,\n        { provide: WINDOW, useFactory: windowFactory, deps: [WindowService] },\n        LocalStorageWrapper,\n        { provide: LOCAL_STORAGE, useFactory: localStoragefactory, deps: [LocalStorageWrapper] },\n    ]\n})\nexport class NgtUniversalModule {}\n"],"names":[],"mappings":";;;;;;;AAAA;;;;IAMI,YAAiC,UAAe;QAC5C,IAAI,CAAC,iBAAiB,CAAC,UAAU,CAAC,EAAE;;;YAGhC,IAAI,CAAC,OAAO,qBAAG,EAAC,SAAS,EAAE,EAAC,SAAS,EAAE,WAAW,EAAC,EAAW,CAAA,CAAC;SAClE;aAAM;YACH,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACzB;KACJ;;;;IAED,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,OAAO,CAAC;KACvB;;;YAfJ,UAAU;;;;4CAGM,MAAM,SAAC,WAAW;;;;;;;ACNnC;;;;IAOI,YAAiC,UAAU;QACvC,IAAI,iBAAiB,CAAC,UAAU,CAAC,EAAE;YAC/B,IAAI,CAAC,eAAe,GAAG,YAAY,CAAC;SACvC;aAAM;YACH,IAAI,CAAC,eAAe,GAAG;gBACvB,KAAK,EAAE;;iBAAgB;gBACvB,OAAO,EAAE,CAAC,GAAW,uBAAK,SAAmB,CAAA;gBAC7C,GAAG,EAAE,CAAC,KAAa,uBAAK,SAAmB,CAAA;gBAC3C,UAAU,EAAE,CAAC,GAAW;;iBAAe;gBACvC,OAAO,EAAE,CAAC,GAAW,EAAE,KAAa;;iBAAe;gBACnD,MAAM,EAAE,CAAC;aACR,CAAC;SACL;KACJ;;;;IAED,IAAI,YAAY;QACZ,OAAO,IAAI,CAAC,eAAe,CAAC;KAC/B;;;YArBJ,UAAU;;;;4CAIM,MAAM,SAAC,WAAW;;;;;;;ACPnC,uBAIa,MAAM,GAAG,IAAI,cAAc,CAAC,mBAAmB,CAAC,CAAC;;;;;AAE9D,uBAA8B,aAA4B;IACtD,OAAO,aAAa,CAAC,YAAY,CAAC;CACrC;AAED,uBAAa,aAAa,GAAG,IAAI,cAAc,CAAC,0BAA0B,CAAC,CAAC;;;;;AAE5E,6BAAoC,mBAAwC;IACxE,OAAO,mBAAmB,CAAC,YAAY,CAAC;CAC3C;AAUD;;;YARC,QAAQ,SAAC;gBACN,SAAS,EAAE;oBACP,aAAa;oBACb,EAAE,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,aAAa,CAAC,EAAE;oBACrE,mBAAmB;oBACnB,EAAE,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,mBAAmB,EAAE,IAAI,EAAE,CAAC,mBAAmB,CAAC,EAAE;iBAC3F;aACJ;;;;;;;;;;;;;;;"}
