"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var rxjs_1 = require("rxjs");
var ScrollService = /** @class */ (function () {
    function ScrollService() {
        var _this = this;
        this.scrollSub = new rxjs_1.Subscription();
        this.resizeSub = new rxjs_1.Subscription();
        // set initial value
        this.manageScrollPos();
        // create observable that we can subscribe to from component or directive
        this.scrollObs = typeof window !== 'undefined' ? rxjs_1.fromEvent(window, 'scroll') : rxjs_1.empty();
        // initiate subscription to update values
        this.scrollSub = this.scrollObs
            .subscribe(function () { return _this.manageScrollPos(); });
        // create observable for changes in screen size
        this.resizeObs = typeof window !== 'undefined' ? rxjs_1.fromEvent(window, 'resize') : rxjs_1.empty();
        // initiate subscription to update values
        this.resizeSub = this.resizeObs
            .subscribe(function () { return _this.manageScrollPos(); });
    }
    ScrollService.prototype.manageScrollPos = function () {
        // update service property
        this.pos = typeof window !== 'undefined' ? window.pageYOffset : 0;
    };
    ScrollService.prototype.ngOnDestroy = function () {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    };
    ScrollService = __decorate([
        core_1.Injectable(),
        __metadata("design:paramtypes", [])
    ], ScrollService);
    return ScrollService;
}());
exports.ScrollService = ScrollService;
//# sourceMappingURL=scroll.service.js.map