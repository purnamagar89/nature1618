"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var scroll_service_1 = require("./scroll.service");
var rxjs_1 = require("rxjs");
var AnimateOnScrollDirective = /** @class */ (function () {
    function AnimateOnScrollDirective(elementRef, renderer, scroll) {
        this.elementRef = elementRef;
        this.renderer = renderer;
        this.scroll = scroll;
        this.scrollSub = new rxjs_1.Subscription();
        this.resizeSub = new rxjs_1.Subscription();
        // Pixel offset from screen bottom to the animated element to determine the start of the animation
        this.offset = 80;
    }
    Object.defineProperty(AnimateOnScrollDirective.prototype, "id", {
        get: function () {
            return this.elementRef.nativeElement.id;
        },
        enumerable: true,
        configurable: true
    });
    AnimateOnScrollDirective.prototype.ngOnInit = function () {
        var _this = this;
        if (!this.animationName) {
            throw new Error('animationName required');
        }
        // default visibility to false
        this.isVisible = false;
        // subscribe to scroll event using service
        this.scrollSub = this.scroll.scrollObs
            .subscribe(function () { return _this.manageVisibility(); });
        // subscribe to resize event using service so scrolling position is always accurate
        this.resizeSub = this.scroll.resizeObs
            .subscribe(function () { return _this.manageVisibility(); });
    };
    AnimateOnScrollDirective.prototype.ngAfterViewInit = function () {
        var _this = this;
        // run visibility check initially in case the element is already visible in viewport
        setTimeout(function () { return _this.manageVisibility(); }, 1);
    };
    AnimateOnScrollDirective.prototype.ngOnDestroy = function () {
        this.scrollSub.unsubscribe();
        this.resizeSub.unsubscribe();
    };
    /**
     * check for visibility of element in viewport to add animation
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.manageVisibility = function () {
        if (this.isVisible) {
            // Optimisation; nothing to do if class has already been applied
            return;
        }
        // check for window height, may change with a window resize
        this.getWinHeight();
        // get vertical position for selected element
        this.getOffsetTop();
        // we should trigger the addition of the animation class a little after getting to the element
        var scrollTrigger = this.offsetTop + this.offset - this.winHeight;
        // using values updated in service
        if (this.scroll.pos >= scrollTrigger) {
            this.addAnimationClass();
        }
    };
    /**
     * utility function to mark element visible and add css class
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.addAnimationClass = function () {
        // mark this element visible, we won't remove the class after this
        this.isVisible = true;
        // use default for animate.css if no value provided
        this.setClass(this.animationName);
    };
    /**
     * utility function to add one or more css classes to element in DOM
     *
     * @param  {string} classes
     * @returns void
     */
    AnimateOnScrollDirective.prototype.setClass = function (classes) {
        for (var _i = 0, _a = classes.split(' '); _i < _a.length; _i++) {
            var c = _a[_i];
            this.renderer.addClass(this.elementRef.nativeElement, c);
        }
    };
    /**
     * get window height utility function
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.getWinHeight = function () {
        this.winHeight = typeof window !== 'undefined' ? window.innerHeight : 0;
    };
    /**
     * get offsetTop value for element
     *
     * @returns void
     */
    AnimateOnScrollDirective.prototype.getOffsetTop = function () {
        if (typeof this.elementRef.nativeElement.getBoundingClientRect === 'function') {
            var viewportTop = this.elementRef.nativeElement.getBoundingClientRect().top;
            var clientTop = this.elementRef.nativeElement.clientTop;
            // get vertical position for selected element
            this.offsetTop = viewportTop + this.scroll.pos - clientTop;
        }
        else {
            this.offsetTop = 0;
        }
    };
    __decorate([
        core_1.Input(),
        __metadata("design:type", String)
    ], AnimateOnScrollDirective.prototype, "animationName", void 0);
    __decorate([
        core_1.Input(),
        __metadata("design:type", Number)
    ], AnimateOnScrollDirective.prototype, "offset", void 0);
    AnimateOnScrollDirective = __decorate([
        core_1.Directive({
            selector: '[animateOnScroll]'
        }),
        __metadata("design:paramtypes", [core_1.ElementRef, core_1.Renderer2, scroll_service_1.ScrollService])
    ], AnimateOnScrollDirective);
    return AnimateOnScrollDirective;
}());
exports.AnimateOnScrollDirective = AnimateOnScrollDirective;
//# sourceMappingURL=animate-on-scroll.directive.js.map